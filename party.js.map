{"version":3,"sources":["webpack://party/webpack/universalModuleDefinition","webpack://party/./src/components/circle.ts","webpack://party/./src/components/color.ts","webpack://party/./src/components/gradient.ts","webpack://party/./src/components/index.ts","webpack://party/./src/components/numericSpline.ts","webpack://party/./src/components/rect.ts","webpack://party/./src/components/spline.ts","webpack://party/./src/components/vector.ts","webpack://party/./src/containers.ts","webpack://party/./src/debug.ts","webpack://party/./src/index.ts","webpack://party/./src/particles/emitter.ts","webpack://party/./src/particles/options/emissionOptions.ts","webpack://party/./src/particles/options/emitterOptions.ts","webpack://party/./src/particles/options/index.ts","webpack://party/./src/particles/options/renderOptions.ts","webpack://party/./src/particles/particle.ts","webpack://party/./src/particles/renderer.ts","webpack://party/./src/scene.ts","webpack://party/./src/settings.ts","webpack://party/./src/systems/math.ts","webpack://party/./src/systems/modules.ts","webpack://party/./src/systems/random.ts","webpack://party/./src/systems/shapes.ts","webpack://party/./src/systems/sources.ts","webpack://party/./src/systems/variation.ts","webpack://party/./src/templates/confetti.ts","webpack://party/./src/templates/index.ts","webpack://party/./src/templates/sparkles.ts","webpack://party/./src/util/config.ts","webpack://party/./src/util/index.ts","webpack://party/./src/util/lazy.ts","webpack://party/./src/util/rotation.ts","webpack://party/./src/util/rules.ts","webpack://party/webpack/bootstrap","webpack://party/webpack/startup"],"names":[],"mappings":"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","file":"party.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"party\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"party\"] = factory();\n\telse\n\t\troot[\"party\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * Represents a circle.\r\n */\r\nexport class Circle {\r\n    /**\r\n     * The x-coordinate of the circle.\r\n     */\r\n    x: number;\r\n    /**\r\n     * The y-coordinate of the circle.\r\n     */\r\n    y: number;\r\n    /**\r\n     * The radius of the circle.\r\n     *\r\n     * @defaultValue 0\r\n     */\r\n    radius: number;\r\n\r\n    /**\r\n     * Creates a new circle at the specified coordinates, with a default radius of 0.\r\n     */\r\n    constructor(x: number, y: number, radius = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n    }\r\n\r\n    public static readonly zero = new Circle(0, 0);\r\n}\r\n","import { lerp } from \"../systems/math\";\r\n\r\n/**\r\n * Represents a color consisting of RGB values. The components of it are\r\n * represented as integers in the range 0 to 255.\r\n *\r\n * @example\r\n * ```ts\r\n * const a = new Color(12, 59, 219);\r\n * const b = Color.fromHex(\"#ffa68d\");\r\n * const result = a.mix(b);\r\n * ```\r\n */\r\nexport class Color {\r\n    /**\r\n     * Returns the r-component of the color.\r\n     */\r\n    get r(): number {\r\n        return this.values[0];\r\n    }\r\n    /**\r\n     * Modifies the r-component of the color.\r\n     * Note that this also floors the value.\r\n     */\r\n    set r(value: number) {\r\n        this.values[0] = Math.floor(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the g-component of the color.\r\n     */\r\n    get g(): number {\r\n        return this.values[1];\r\n    }\r\n    /**\r\n     * Modifies the g-component of the color.\r\n     * Note that this also floors the value.\r\n     */\r\n    set g(value: number) {\r\n        this.values[1] = Math.floor(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the b-component of the color.\r\n     * Note that this also floors the value.\r\n     */\r\n    get b(): number {\r\n        return this.values[2];\r\n    }\r\n    /**\r\n     * Modifies the b-component of the color.\r\n     */\r\n    set b(value: number) {\r\n        this.values[2] = Math.floor(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the rgb-components of the color, bundled as a copied array.\r\n     */\r\n    get rgb(): [number, number, number] {\r\n        return [this.r, this.g, this.b];\r\n    }\r\n    /**\r\n     * Simultaneously updates the rgb-components of the color, by passing an array.\r\n     */\r\n    set rgb(values: [number, number, number]) {\r\n        this.r = values[0];\r\n        this.g = values[1];\r\n        this.b = values[2];\r\n    }\r\n\r\n    private values = new Float32Array(3);\r\n\r\n    /**\r\n     * Creates a new color instance from the specified RGB components.\r\n     */\r\n    constructor(r: number, g: number, b: number) {\r\n        this.rgb = [r, g, b];\r\n    }\r\n\r\n    /**\r\n     * Returns (1, 1, 1).\r\n     */\r\n    public static readonly white = new Color(255, 255, 255);\r\n    /**\r\n     * Returns (0, 0, 0).\r\n     */\r\n    public static readonly black = new Color(0, 0, 0);\r\n\r\n    /**\r\n     * Mixes the two color together with an optional mixing weight.\r\n     * This weight is 0.5 by default, perfectly averaging the color.\r\n     */\r\n    public mix(color: Color, weight = 0.5): Color {\r\n        return new Color(\r\n            lerp(this.r, color.r, weight),\r\n            lerp(this.g, color.g, weight),\r\n            lerp(this.b, color.b, weight)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the hexadecimal representation of the color, prefixed by '#'.\r\n     */\r\n    public toHex(): string {\r\n        const hex = (v: number) => v.toString(16).padStart(2, \"0\");\r\n        return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\r\n    }\r\n\r\n    /**\r\n     * Returns a formatted representation of the color.\r\n     */\r\n    public toString(): string {\r\n        return \"rgb(\" + this.values.join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Creates a color from the specified hexadecimal string.\r\n     * This string can optionally be prefixed by '#'.\r\n     */\r\n    public static fromHex(hex: string): Color {\r\n        if (hex.startsWith(\"#\")) {\r\n            hex = hex.substr(1);\r\n        }\r\n        return new Color(\r\n            parseInt(hex.substr(0, 2), 16),\r\n            parseInt(hex.substr(2, 2), 16),\r\n            parseInt(hex.substr(4, 2), 16)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a color from the specified HSL components.\r\n     *\r\n     * @see https://stackoverflow.com/a/9493060/5507624\r\n     */\r\n    public static fromHsl(h: number, s: number, l: number): Color {\r\n        h /= 360;\r\n        s /= 100;\r\n        l /= 100;\r\n        if (s === 0) {\r\n            return new Color(l, l, l);\r\n        } else {\r\n            const hue2rgb = (p: number, q: number, t: number): number => {\r\n                if (t < 0) t += 1;\r\n                if (t > 1) t -= 1;\r\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n                if (t < 1 / 2) return q;\r\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n                return p;\r\n            };\r\n            const to255 = (v: number): number => Math.min(255, 256 * v);\r\n\r\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            const p = 2 * l - q;\r\n\r\n            return new Color(\r\n                to255(hue2rgb(p, q, h + 1 / 3)),\r\n                to255(hue2rgb(p, q, h)),\r\n                to255(hue2rgb(p, q, h - 1 / 3))\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Color } from \"./\";\r\nimport { Spline } from \"./spline\";\r\n\r\n/**\r\n * Represents a gradient that can be used to interpolate between multiple color.\r\n */\r\nexport class Gradient extends Spline<Color> {\r\n    /**\r\n     * Interpolates between two color on the gradient.\r\n     */\r\n    protected interpolate(a: Color, b: Color, t: number): Color {\r\n        return a.mix(b, t);\r\n    }\r\n\r\n    /**\r\n     * Returns a solid gradient from the given color.\r\n     */\r\n    public static solid(color: Color): Gradient {\r\n        return new Gradient({ value: color, time: 0.5 });\r\n    }\r\n\r\n    /**\r\n     * Returns a gradient with evenly spaced keys from the given colors.\r\n     */\r\n    public static simple(...colors: Color[]): Gradient {\r\n        const step = 1 / (colors.length - 1);\r\n        return new Gradient(\r\n            ...colors.map((color, index) => ({\r\n                value: color,\r\n                time: index * step,\r\n            }))\r\n        );\r\n    }\r\n}\r\n","export * from \"./circle\";\r\nexport * from \"./color\";\r\nexport * from \"./gradient\";\r\nexport * from \"./numericSpline\";\r\nexport * from \"./rect\";\r\nexport * from \"./vector\";\r\n","import { slerp } from \"../systems/math\";\r\nimport { Spline } from \"./spline\";\r\n\r\n/**\r\n * Represents a spline that can take numeric values.\r\n */\r\nexport class NumericSpline extends Spline<number> {\r\n    /**\r\n     * Smoothly interpolates between two keys on the spline.\r\n     */\r\n    protected interpolate(a: number, b: number, t: number): number {\r\n        return slerp(a, b, t);\r\n    }\r\n}\r\n","/**\r\n * Represents a rectangle with an origin and size.\r\n */\r\nexport class Rect {\r\n    /**\r\n     * The x-position of the rectangle.\r\n     */\r\n    x: number;\r\n    /**\r\n     * The y-position of the rectangle.\r\n     */\r\n    y: number;\r\n    /**\r\n     * The width of the rectangle.\r\n     */\r\n    width: number;\r\n    /**\r\n     * The height of the rectangle.\r\n     */\r\n    height: number;\r\n\r\n    constructor(x: number, y: number, width = 0, height = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    public static readonly zero: Rect = new Rect(0, 0);\r\n\r\n    /**\r\n     * Returns a new document-space rectangle from the viewport's bounds.\r\n     */\r\n    public static fromScreen(): Rect {\r\n        return new Rect(\r\n            window.scrollX,\r\n            window.scrollY,\r\n            window.innerWidth,\r\n            window.innerHeight\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a new document-space rectangle from the specified element.\r\n     */\r\n    public static fromElement(element: HTMLElement): Rect {\r\n        const r = element.getBoundingClientRect();\r\n        return new Rect(\r\n            window.scrollX + r.x,\r\n            window.scrollY + r.y,\r\n            r.width,\r\n            r.height\r\n        );\r\n    }\r\n}\r\n","import { invlerp } from \"../systems/math\";\r\n\r\n/**\r\n * Represents a key on a spline.\r\n */\r\nexport interface SplineKey<T> {\r\n    /**\r\n     * The value of the key.\r\n     */\r\n    value: T;\r\n    /**\r\n     * The position of the key.\r\n     */\r\n    time: number;\r\n}\r\n\r\n/**\r\n * Represents a spline that can be used to continueously evaluate a function\r\n * between keys. The base implementation is kept generic, so the functionality\r\n * can easily be implemented for similar constructs, such as gradients.\r\n */\r\nexport abstract class Spline<T> {\r\n    /**\r\n     * The keys in the gradient. Note that these are not sorted.\r\n     */\r\n    protected keys: SplineKey<T>[];\r\n\r\n    /**\r\n     * Creates a new spline instance, using the specified keys.\r\n     * Note that you have to pass at least one key.\r\n     */\r\n    constructor(...keys: SplineKey<T>[]) {\r\n        if (keys.length === 0) {\r\n            throw new Error(\"Splines require at least one key.\");\r\n        }\r\n        if (Array.isArray(keys[0])) {\r\n            throw new Error(\r\n                \"You are trying to pass an array to the spline constructor, which is not supported. \" +\r\n                    \"Try to spread the array into the constructor instead.\"\r\n            );\r\n        }\r\n        this.keys = keys;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the spline at the given time.\r\n     */\r\n    public evaluate(time: number): T {\r\n        if (this.keys.length === 0) {\r\n            throw new Error(\"Attempt to evaluate a spline with no keys.\");\r\n        }\r\n\r\n        if (this.keys.length === 1) {\r\n            // The spline only contains one key, therefore is constant.\r\n            return this.keys[0].value;\r\n        }\r\n\r\n        // Sort the keys and figure out the first key above the passed time.\r\n        const ascendingKeys = this.keys.sort((a, b) => a.time - b.time);\r\n        const upperKeyIndex = ascendingKeys.findIndex((g) => g.time > time);\r\n\r\n        // If the found index is either 0 or -1, the specified time falls out\r\n        // of the range of the supplied keys. In that case, the value of the\r\n        // nearest applicant key is returned.\r\n        if (upperKeyIndex === 0) {\r\n            return ascendingKeys[0].value;\r\n        }\r\n        if (upperKeyIndex === -1) {\r\n            return ascendingKeys[ascendingKeys.length - 1].value;\r\n        }\r\n\r\n        // Otherwise, find the bounding keys, and extrapolate the time between\r\n        // the two. This is then used to interpolate between the two keys,\r\n        // using the provided implementation.\r\n        const lowerKey = ascendingKeys[upperKeyIndex - 1];\r\n        const upperKey = ascendingKeys[upperKeyIndex];\r\n        const containedTime = invlerp(lowerKey.time, upperKey.time, time);\r\n\r\n        return this.interpolate(lowerKey.value, upperKey.value, containedTime);\r\n    }\r\n\r\n    /**\r\n     * Interpolates using the values of two keys.\r\n     */\r\n    protected abstract interpolate(a: T, b: T, t: number): T;\r\n}\r\n","import { deg2rad, rad2deg } from \"../systems/math\";\r\n\r\n/**\r\n * Represents a structure used to process vectors.\r\n *\r\n * @remarks\r\n * Note that the operations in this class will **not** modify the original vector,\r\n * except for the property assignments. This is to ensure that vectors are not\r\n * unintentionally modified.\r\n *\r\n * @example\r\n * ```ts\r\n * const vectorA = new Vector(1, 3, 5);\r\n * const vectorB = new Vector(2, 3, 1);\r\n * const vectorC = vectorA.add(vectorB); // (3, 6, 6)\r\n * ```\r\n */\r\nexport class Vector {\r\n    /**\r\n     * Returns the x-component of the vector.\r\n     */\r\n    get x(): number {\r\n        return this.values[0];\r\n    }\r\n    /**\r\n     * Modifies the x-component of the vector.\r\n     */\r\n    set x(value: number) {\r\n        this.values[0] = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the y-component of the vector.\r\n     */\r\n    get y(): number {\r\n        return this.values[1];\r\n    }\r\n    /**\r\n     * Modifies the y-component of the vector.\r\n     */\r\n    set y(value: number) {\r\n        this.values[1] = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the z-component of the vector.\r\n     */\r\n    get z(): number {\r\n        return this.values[2];\r\n    }\r\n    /**\r\n     * Modifies the z-component of the vector.\r\n     */\r\n    set z(value: number) {\r\n        this.values[2] = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the xyz-components of the vector, bundled as a copied array.\r\n     */\r\n    get xyz(): [number, number, number] {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    /**\r\n     * Simultaneously updates the xyz-components of the vector, by passing an array.\r\n     */\r\n    set xyz(values: [number, number, number]) {\r\n        this.values[0] = values[0];\r\n        this.values[1] = values[1];\r\n        this.values[2] = values[2];\r\n    }\r\n\r\n    private values = new Float32Array(3);\r\n\r\n    /**\r\n     * Creates a new vector with optional x-, y-, and z-components.\r\n     * Omitted components are defaulted to 0.\r\n     */\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        this.xyz = [x, y, z];\r\n    }\r\n\r\n    /**\r\n     * Returns (0, 0, 0).\r\n     */\r\n    public static readonly zero: Vector = new Vector(0, 0, 0);\r\n    /**\r\n     * Returns (1, 1, 1).\r\n     */\r\n    public static readonly one: Vector = new Vector(1, 1, 1);\r\n    /**\r\n     * Returns (1, 0, 0).\r\n     */\r\n    public static readonly right: Vector = new Vector(1, 0, 0);\r\n    /**\r\n     * Returns (0, 1, 0).\r\n     */\r\n    public static readonly up: Vector = new Vector(0, 1, 0);\r\n    /**\r\n     * Returns (0, 0, 1).\r\n     */\r\n    public static readonly forward: Vector = new Vector(0, 0, 1);\r\n\r\n    /**\r\n     * Returns the length of the vector.\r\n     */\r\n    public magnitude(): number {\r\n        return Math.sqrt(this.sqrMagnitude());\r\n    }\r\n\r\n    /**\r\n     * Returns the squared length of the vector.\r\n     */\r\n    public sqrMagnitude(): number {\r\n        return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    /**\r\n     * Adds the two vectors together, component-wise.\r\n     */\r\n    public add(vector: Vector): Vector {\r\n        return new Vector(\r\n            this.x + vector.x,\r\n            this.y + vector.y,\r\n            this.z + vector.z\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subtracts the right vector from the left one, component-wise.\r\n     */\r\n    public subtract(vector: Vector): Vector {\r\n        return new Vector(\r\n            this.x - vector.x,\r\n            this.y - vector.y,\r\n            this.z - vector.z\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Scales the lefthand vector by another vector or by a number.\r\n     */\r\n    public scale(scalar: number | Vector): Vector {\r\n        if (typeof scalar === \"number\") {\r\n            return new Vector(\r\n                this.x * scalar,\r\n                this.y * scalar,\r\n                this.z * scalar\r\n            );\r\n        } else {\r\n            return new Vector(\r\n                this.x * scalar.x,\r\n                this.y * scalar.y,\r\n                this.z * scalar.z\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes the vector to a length of 1. If the length was previously zero,\r\n     * then a zero-length vector will be returned.\r\n     */\r\n    public normalized(): Vector {\r\n        const magnitude = this.magnitude();\r\n        if (magnitude !== 0) {\r\n            return this.scale(1 / magnitude);\r\n        }\r\n        return new Vector(...this.xyz);\r\n    }\r\n\r\n    /**\r\n     * Returns the angle between two vectors, in degrees.\r\n     */\r\n    public angle(vector: Vector): number {\r\n        return (\r\n            rad2deg *\r\n            Math.acos(\r\n                (this.x * vector.x + this.y * vector.y + this.z * vector.z) /\r\n                    (this.magnitude() * vector.magnitude())\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the cross-product of two vectors.\r\n     */\r\n    public cross(vector: Vector): Vector {\r\n        return new Vector(\r\n            this.y * vector.z - this.z * vector.y,\r\n            this.z * vector.x - this.x * vector.z,\r\n            this.x * vector.y - this.y * vector.x\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the dot-product of two vectors.\r\n     */\r\n    public dot(vector: Vector): number {\r\n        return (\r\n            this.magnitude() *\r\n            vector.magnitude() *\r\n            Math.cos(deg2rad * this.angle(vector))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a formatted representation of the vector.\r\n     */\r\n    public toString(): string {\r\n        return \"Vector(\" + this.values.join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new vector from an angle, in degrees. Note that the z-component will be zero.\r\n     */\r\n    public static from2dAngle(angle: number): Vector {\r\n        return new Vector(Math.cos(angle * deg2rad), Math.sin(angle * deg2rad));\r\n    }\r\n}\r\n","import { settings } from \"./settings\";\r\nimport { Lazy } from \"./util/lazy\";\r\n\r\n/**\r\n * The prefix to apply to the containers.\r\n */\r\nconst elementPrefix = \"party-js-\";\r\n\r\n/**\r\n * A utility method to partially update the style of the specified element.\r\n */\r\nfunction partialUpdateStyle(\r\n    element: HTMLElement,\r\n    style: Partial<CSSStyleDeclaration>\r\n): void {\r\n    Object.assign(element.style, style);\r\n}\r\n\r\n/**\r\n * Checks if the specified container is 'active', meaning not undefined and attached to the DOM.\r\n */\r\nfunction isContainerActive(container: HTMLElement) {\r\n    return container && container.isConnected;\r\n}\r\n\r\n/**\r\n * Returns the root container of the library. Creates it, if it doesn't exist yet.\r\n */\r\nfunction createRootContainer(): HTMLElement {\r\n    const container = document.createElement(\"div\");\r\n    container.id = elementPrefix + \"container\";\r\n    // Style the container to stretch across the full screen, without being interactable\r\n    // by the user. Also apply the z-index from the global settings.\r\n    partialUpdateStyle(container, {\r\n        position: \"absolute\",\r\n        left: \"0\",\r\n        top: \"0\",\r\n        pointerEvents: \"none\",\r\n        userSelect: \"none\",\r\n        zIndex: settings.zIndex.toString(),\r\n    });\r\n    document.body.appendChild(container);\r\n\r\n    // Ensure that the root container is always the same size as the entire DOM.\r\n    function fitToWindow() {\r\n        if (isContainerActive(container)) {\r\n            container.style.height = document.body.offsetHeight + \"px\";\r\n            container.style.width = document.body.offsetWidth + \"px\";\r\n        }\r\n        window.requestAnimationFrame(fitToWindow);\r\n    }\r\n    window.requestAnimationFrame(fitToWindow);\r\n\r\n    return container;\r\n}\r\n\r\n/**\r\n * Returns the debugging container of the library. Creates it, if it doesn't exist yet.\r\n */\r\nfunction createDebugContainer(): HTMLElement {\r\n    const container = document.createElement(\"div\");\r\n    container.id = elementPrefix + \"debug\";\r\n    // Style the container in a non-prominent, simplistic, yet clean way, in the top-left corner.\r\n    partialUpdateStyle(container, {\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        margin: \"0.5em\",\r\n        padding: \"0.5em 1em\",\r\n        border: \"2px solid rgb(0, 0, 0, 0.2)\",\r\n        background: \"rgb(0, 0, 0, 0.1)\",\r\n        color: \"#555\",\r\n        fontFamily: \"monospace\",\r\n    });\r\n    rootContainer.current.appendChild(container);\r\n\r\n    return container;\r\n}\r\n\r\n/**\r\n * Returns the particles container of the library. Creates it, if it doesn't exist yet.\r\n */\r\nfunction createParticleContainer(): HTMLElement {\r\n    const container = document.createElement(\"div\");\r\n    container.id = elementPrefix + \"particles\";\r\n    // Style the container to stretch the full parent width, and apply a perspective distortion.\r\n    partialUpdateStyle(container, {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        overflow: \"hidden\",\r\n        perspective: \"100vw\",\r\n    });\r\n    rootContainer.current.appendChild(container);\r\n\r\n    return container;\r\n}\r\n\r\nexport const rootContainer: Lazy<HTMLElement> = new Lazy<HTMLElement>(\r\n    createRootContainer,\r\n    isContainerActive\r\n);\r\nexport const debugContainer: Lazy<HTMLElement> = new Lazy<HTMLElement>(\r\n    createDebugContainer,\r\n    isContainerActive\r\n);\r\nexport const particleContainer: Lazy<HTMLElement> = new Lazy<HTMLElement>(\r\n    createParticleContainer,\r\n    isContainerActive\r\n);\r\n","import { debugContainer } from \"./containers\";\r\nimport { Scene } from \"./scene\";\r\nimport { settings } from \"./settings\";\r\n\r\n/**\r\n * Represents a utility module to view debug information inside the DOM.\r\n * This is disabled by default and needs to manually be enabled by setting\r\n * the '.enabled' field to true.\r\n *\r\n * While disabled, the utility will not fetch stats and update itself.\r\n */\r\nexport class Debug {\r\n    /**\r\n     * The rate at which the debug interface should refresh itself (per second).\r\n     */\r\n    private readonly refreshRate = 8;\r\n    /**\r\n     * The timer counting down to refreshes.\r\n     */\r\n    private refreshTimer = 1 / this.refreshRate;\r\n\r\n    /**\r\n     * Registers a new debug utility that is attached to the given scene.\r\n     *\r\n     * @param scene The scene to attach to.\r\n     */\r\n    constructor(private scene: Scene) {}\r\n\r\n    /**\r\n     * Processes a tick event in the interface. This checks if enough has passed to\r\n     * trigger a refresh, and if so, fetches the debug information and updates the DOM.\r\n     *\r\n     * @param delta The time that has elapsed since the last tick.\r\n     */\r\n    public tick(delta: number): void {\r\n        const container = debugContainer.current;\r\n\r\n        // If the current display style does not match the style inferred from the\r\n        // enabled-state, update it.\r\n        const displayStyle = settings.debug ? \"block\" : \"none\";\r\n        if (container.style.display !== displayStyle) {\r\n            container.style.display = displayStyle;\r\n        }\r\n\r\n        if (!settings.debug) {\r\n            // If the interface is not enabled, don't fetch or update any infos.\r\n            return;\r\n        }\r\n\r\n        this.refreshTimer += delta;\r\n        if (this.refreshTimer > 1 / this.refreshRate) {\r\n            this.refreshTimer = 0;\r\n            // Update the container with the fetched information joined on line breaks.\r\n            container.innerHTML = this.getDebugInformation(delta).join(\"<br>\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches the debug information from the specified delta and the linked scene.\r\n     *\r\n     * @returns An array of debugging information, formatted as HTML.\r\n     */\r\n    private getDebugInformation(delta: number): string[] {\r\n        // Count emitters and particles.\r\n        const emitters = this.scene.emitters.length;\r\n        const particles = this.scene.emitters.reduce(\r\n            (acc, cur) => acc + cur.particles.length,\r\n            0\r\n        );\r\n\r\n        const infos: string[] = [\r\n            `<b>party.js Debug</b>`,\r\n            `--------------`,\r\n            `FPS: ${Math.round(1 / delta)}`,\r\n            `Emitters: ${emitters}`,\r\n            `Particles: ${particles}`,\r\n        ];\r\n\r\n        // Emitter informations are formatted using their index, internal timer\r\n        // and total particle count.\r\n        const emitterInfos: string[] = this.scene.emitters.map(function (\r\n            emitter\r\n        ) {\r\n            return [\r\n                // Show the current loop and the total loops.\r\n                `⭯: ${emitter[\"currentLoop\"] + 1}/${\r\n                    emitter.options.loops >= 0 ? emitter.options.loops : \"∞\"\r\n                }`,\r\n                // Show the amount of particle contained.\r\n                `Σp: ${emitter.particles.length}`,\r\n                // Show the internal timer.\r\n                !emitter.isExpired\r\n                    ? `Σt: ${emitter[\"durationTimer\"].toFixed(3)}s`\r\n                    : \"<i>expired</i>\",\r\n            ].join(\", \");\r\n        });\r\n\r\n        infos.push(\"--------------\", ...emitterInfos);\r\n\r\n        return infos;\r\n    }\r\n}\r\n","import * as components from \"./components\";\r\nimport { Emitter } from \"./particles/emitter\";\r\nimport { Particle } from \"./particles/particle\";\r\nimport { Scene } from \"./scene\";\r\nimport { settings } from \"./settings\";\r\nimport * as math from \"./systems/math\";\r\nimport * as modules from \"./systems/modules\";\r\nimport * as random from \"./systems/random\";\r\nimport * as shapes from \"./systems/shapes\";\r\nimport * as sources from \"./systems/sources\";\r\nimport * as variation from \"./systems/variation\";\r\nimport * as templates from \"./templates\";\r\nimport * as util from \"./util\";\r\n\r\n// Create the lazy-initializing scene.\r\nconst scene = new util.Lazy<Scene>(() => {\r\n    // The library requires the use of the DOM, hence it cannot run in non-browser environments.\r\n    if (typeof document === \"undefined\" || typeof window === \"undefined\") {\r\n        throw new Error(\r\n            \"It seems like you are trying to run party.js in a non-browser-like environment, which is not supported.\"\r\n        );\r\n    }\r\n    return new Scene();\r\n});\r\n\r\nconst PartyGlobal = {\r\n    // Export utility components at top level.\r\n    ...components,\r\n    // Export templates to quickly & easily create sample systems.\r\n    ...templates,\r\n    // Export shapes so new ones can be registered easily.\r\n    ...shapes,\r\n    // Export the module builder, so new modules can be built easily.\r\n    ...modules,\r\n\r\n    // Export the scene and the global settings.\r\n    scene,\r\n    settings,\r\n\r\n    // Export the emitter and particle types.\r\n    Particle,\r\n    Emitter,\r\n\r\n    // Export various utilities and objects.\r\n    variation,\r\n    sources,\r\n    random,\r\n    math,\r\n    util,\r\n\r\n    /**\r\n     * Forces the initialization of the otherwise lazy scene.\r\n     */\r\n    forceInit(): void {\r\n        scene.current;\r\n    },\r\n};\r\n\r\nexport default PartyGlobal;\r\n","import { Vector } from \"../components/vector\";\r\nimport { settings } from \"../settings\";\r\nimport { evaluateVariation } from \"../systems/variation\";\r\nimport { overrideDefaults } from \"../util/config\";\r\nimport {\r\n    EmissionOptions,\r\n    EmitterOptions,\r\n    RenderOptions,\r\n    getDefaultEmissionOptions,\r\n    getDefaultEmitterOptions,\r\n    getDefaultRendererOptions,\r\n} from \"./options\";\r\nimport { Particle } from \"./particle\";\r\n\r\n/**\r\n * Defines the set of options that can be used when creating a new emitter.\r\n */\r\nexport interface EmitterConstructionOptions {\r\n    emitterOptions?: Partial<EmitterOptions>;\r\n    emissionOptions?: Partial<EmissionOptions>;\r\n    rendererOptions?: Partial<RenderOptions>;\r\n}\r\n\r\n/**\r\n * Represents an emitter that is responsible for spawning and updating particles.\r\n *\r\n * Particles themselves are just data-holders, with the system acting upon them and\r\n * modifying them. The modifications are done mainly via modules, that use the\r\n * particle's data together with some function to apply temporal transitions.\r\n *\r\n * @see Particle\r\n * @see ParticleModifierModule\r\n */\r\nexport class Emitter {\r\n    /**\r\n     * The particles currently contained within the system.\r\n     */\r\n    public readonly particles: Particle[] = [];\r\n\r\n    /**\r\n     * The main options of the emitter.\r\n     */\r\n    public readonly options: EmitterOptions;\r\n    /**\r\n     * The emission options of the emitter.\r\n     */\r\n    public readonly emission: EmissionOptions;\r\n    /**\r\n     * The renderer options of the emitter.\r\n     */\r\n    public readonly renderer: RenderOptions;\r\n\r\n    private currentLoop = 0; // The current loop index.\r\n    private durationTimer = 0; // Measures the current runtime duration, to allow loops to reset.\r\n    private emissionTimer = 0; // Measures the current emission timer, to allow spawning particles in intervals.\r\n\r\n    private attemptedBurstIndices: number[] = []; // The indices of the particle bursts that were attempted this loop.\r\n\r\n    /**\r\n     * Checks if the emitter is already expired and can be removed.\r\n     * Expired emitters do not emit new particles.\r\n     */\r\n    public get isExpired(): boolean {\r\n        return (\r\n            this.options.loops >= 0 && this.currentLoop >= this.options.loops\r\n        );\r\n    }\r\n    /**\r\n     * Checks if the emitter can safely be removed.\r\n     * This is true if no more particles are active.\r\n     */\r\n    public get canRemove(): boolean {\r\n        return this.particles.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a new emitter, using default options.\r\n     */\r\n    constructor(options?: EmitterConstructionOptions) {\r\n        this.options = overrideDefaults(\r\n            getDefaultEmitterOptions(),\r\n            options?.emitterOptions\r\n        );\r\n        this.emission = overrideDefaults(\r\n            getDefaultEmissionOptions(),\r\n            options?.emissionOptions\r\n        );\r\n        this.renderer = overrideDefaults(\r\n            getDefaultRendererOptions(),\r\n            options?.rendererOptions\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Clears all particles inside the emitter.\r\n     *\r\n     * @returns The number of cleared particles.\r\n     */\r\n    public clearParticles(): number {\r\n        return this.particles.splice(0).length;\r\n    }\r\n\r\n    /**\r\n     * Processes a tick of the emitter, using the elapsed time.\r\n     *\r\n     * @remarks\r\n     * This handles a few things, namely:\r\n     * - Incrementing the duration timer and potentially incrementing the loop.\r\n     * - Handling particle bursts & emissions.\r\n     * - Despawning particles conditionally.\r\n     *\r\n     * @param delta The time, in seconds, passed since the last tick.\r\n     */\r\n    public tick(delta: number): void {\r\n        if (!this.isExpired) {\r\n            this.durationTimer += delta;\r\n            if (this.durationTimer >= this.options.duration) {\r\n                this.currentLoop++;\r\n\r\n                // To start a new loop, the duration timer and attempted bursts are reset.\r\n                this.durationTimer = 0;\r\n                this.attemptedBurstIndices = [];\r\n            }\r\n\r\n            // We need to check the expiry again, in case the added loop or duration changed something.\r\n            if (!this.isExpired) {\r\n                // Iterate over the bursts, attempting to execute them if the time is ready.\r\n                let burstIndex = 0;\r\n                for (const burst of this.emission.bursts) {\r\n                    if (burst.time <= this.durationTimer) {\r\n                        // Has the burst already been attempted? If not ...\r\n                        if (!this.attemptedBurstIndices.includes(burstIndex)) {\r\n                            // Perform the burst, emitting a variable amount of particles.\r\n                            const count = evaluateVariation(burst.count);\r\n                            for (let i = 0; i < count; i++) {\r\n                                this.emitParticle();\r\n                            }\r\n                            // Mark the burst as attempted.\r\n                            this.attemptedBurstIndices.push(burstIndex);\r\n                        }\r\n                    }\r\n                    burstIndex++;\r\n                }\r\n\r\n                // Handle the 'emission over time'. By using a while-loop instead of a simple\r\n                // if-condition, we take high deltas into account, and ensure that the correct\r\n                // number of particles will consistently be emitted.\r\n                this.emissionTimer += delta;\r\n                const delay = 1 / this.emission.rate;\r\n                while (this.emissionTimer > delay) {\r\n                    this.emissionTimer -= delay;\r\n                    this.emitParticle();\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = this.particles.length - 1; i >= 0; i--) {\r\n            const particle = this.particles[i];\r\n            this.tickParticle(particle, delta);\r\n\r\n            // Particles should be despawned (i.e. removed from the collection) if any of\r\n            // the despawning rules apply to them.\r\n            if (this.options.despawningRules.some((rule) => rule(particle))) {\r\n                this.particles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs an internal tick for the particle.\r\n     *\r\n     * @remarks\r\n     * This method controls the particle's lifetime, location and velocity, according\r\n     * to the elapsed delta and the configuration. Additionally, each of the emitter's\r\n     * modules is applied to the particle.\r\n     *\r\n     * @param particle The particle to apply the tick for.\r\n     * @param delta The time, in seconds, passed since the last tick.\r\n     */\r\n    private tickParticle(particle: Particle, delta: number): void {\r\n        particle.lifetime -= delta;\r\n\r\n        if (this.options.useGravity) {\r\n            // Apply gravitational acceleration to the particle.\r\n            particle.velocity = particle.velocity.add(\r\n                Vector.up.scale(settings.gravity * delta)\r\n            );\r\n        }\r\n\r\n        // Apply the particle's velocity to its location.\r\n        particle.location = particle.location.add(\r\n            particle.velocity.scale(delta)\r\n        );\r\n\r\n        // Apply the modules to the particle.\r\n        for (const moduleFunction of this.options.modules) {\r\n            moduleFunction(particle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits a particle using the registered settings.\r\n     * Also may despawn a particle if the maximum number of particles is exceeded.\r\n     */\r\n    private emitParticle(): Particle {\r\n        const particle: Particle = new Particle({\r\n            location: this.emission.sourceSampler(),\r\n            lifetime: evaluateVariation(this.emission.initialLifetime),\r\n            velocity: Vector.from2dAngle(\r\n                evaluateVariation(this.emission.angle)\r\n            ).scale(evaluateVariation(this.emission.initialSpeed)),\r\n            size: evaluateVariation(this.emission.initialSize),\r\n            rotation: evaluateVariation(this.emission.initialRotation),\r\n            color: evaluateVariation(this.emission.initialColor),\r\n        });\r\n        this.particles.push(particle);\r\n\r\n        // Ensure that no more particles than 'maxParticles' can exist.\r\n        if (this.particles.length > this.options.maxParticles) {\r\n            this.particles.shift();\r\n        }\r\n\r\n        return particle;\r\n    }\r\n}\r\n","import { Color, Rect, Vector } from \"../../components\";\r\nimport { SourceSampler, rectSource } from \"../../systems/sources\";\r\nimport { Variation } from \"../../systems/variation\";\r\n\r\n/**\r\n * Holds a set of options used to configure the way particles are emitted in.\r\n */\r\nexport interface EmissionOptions {\r\n    /**\r\n     * The number of particles that should be emitted per second.\r\n     *\r\n     * @defaultValue 10\r\n     */\r\n    rate: number;\r\n    /**\r\n     * The bursts that particles should be bulk-emitted at.\r\n     *\r\n     * @defaultValue An empty array.\r\n     */\r\n    bursts: Burst[];\r\n\r\n    /**\r\n     * The sampler used to generate particle spawn positions.\r\n     *\r\n     * @defaultValue A sampler that emits particles from (0, 0).\r\n     */\r\n    sourceSampler: SourceSampler;\r\n    /**\r\n     * The angle that particles will be emitted at, in degrees. This is used to, for example,\r\n     * give the particles a particular amount of initial force in a direction.\r\n     *\r\n     * @defaultValue 0\r\n     */\r\n    angle: Variation<number>;\r\n\r\n    /**\r\n     * The variable, initial lifetime of the emitted particle.\r\n     *\r\n     * @defaultValue 5\r\n     */\r\n    initialLifetime: Variation<number>;\r\n    /**\r\n     * The variable, initial speed of the emitted particles.\r\n     *\r\n     * @defaultValue 5\r\n     */\r\n    initialSpeed: Variation<number>;\r\n    /**\r\n     * The variable, initial size of the emitted particles.\r\n     *\r\n     * @defaultValue 1\r\n     */\r\n    initialSize: Variation<number>;\r\n    /**\r\n     * The variable, initial rotation of the emitted particles, as euler angles.\r\n     *\r\n     * @defaultValue `Vector.zero`\r\n     */\r\n    initialRotation: Variation<Vector>;\r\n    /**\r\n     * The variable, initial color of the emitted particles.\r\n     *\r\n     * @defaultValue `Color.white`\r\n     */\r\n    initialColor: Variation<Color>;\r\n}\r\n\r\n/**\r\n * Represents a burst of emitted particles.\r\n */\r\nexport interface Burst {\r\n    /**\r\n     * The time to perform the burst at. This must be less than the duration of the emitter.\r\n     */\r\n    time: number;\r\n    /**\r\n     * The variable number of particles that should be emitted.\r\n     */\r\n    count: Variation<number>;\r\n    /**\r\n     * The (optional) likelihood that the burst will activate, from 0 (never) to 1 (always).\r\n     */\r\n    probability?: number;\r\n}\r\n\r\n/**\r\n * Returns the default set of emission options.\r\n */\r\nexport function getDefaultEmissionOptions(): EmissionOptions {\r\n    return {\r\n        rate: 10,\r\n\r\n        angle: 0,\r\n        bursts: [],\r\n        sourceSampler: rectSource(Rect.zero),\r\n\r\n        initialLifetime: 5,\r\n        initialSpeed: 5,\r\n        initialSize: 1,\r\n        initialRotation: Vector.zero,\r\n        initialColor: Color.white,\r\n    };\r\n}\r\n","import { ModuleFunction } from \"../../systems/modules\";\r\nimport { despawningRules } from \"../../util/rules\";\r\nimport { Particle } from \"../particle\";\r\n\r\n/**\r\n * Represents a rule that decides whether a particle should be despawned or not.\r\n */\r\nexport type ParticleDespawnRule = (particle: Particle) => boolean;\r\n\r\n/**\r\n * Holds a set of options that control the basic functionality of an emitter.\r\n */\r\nexport interface EmitterOptions {\r\n    /**\r\n     * The duration of one emission cycle.\r\n     * @defaultValue 5\r\n     */\r\n    duration: number;\r\n    /**\r\n     * The number of loops that should be performed. Negative numbers result in infinite loops.\r\n     * @defaultValue 1\r\n     */\r\n    loops: number;\r\n\r\n    /**\r\n     * Whether to apply gravity to the emitted particles.\r\n     * @defaultValue true\r\n     */\r\n    useGravity: boolean;\r\n    /**\r\n     * The maximum number of particles that may be active in the current emitter.\r\n     * @defaultValue 300\r\n     */\r\n    maxParticles: number;\r\n    /**\r\n     * The rules used to determine when particles should be despawned.\r\n     *\r\n     * @remarks\r\n     * Note that if this array is reset, the particles will never be despawned by the\r\n     * emitter, and will only be cleared once the system is destroyed.\r\n     *\r\n     * @defaultValue Despawns particles when their lifetime is over or when they leave the document bounds.\r\n     */\r\n    despawningRules: ParticleDespawnRule[];\r\n    /**\r\n     * The array of module functions used to modify particles while they are active.\r\n     *\r\n     * @remarks\r\n     * New modules can be created via the `ModuleBuilder` class. Alternatively, for full\r\n     * control, a function can be passed that takes a particle as a parameter, and modifies it.\r\n     */\r\n    modules: ModuleFunction[];\r\n}\r\n\r\n/**\r\n * Returns the default set of emitter options.\r\n */\r\nexport function getDefaultEmitterOptions(): EmitterOptions {\r\n    return {\r\n        duration: 5,\r\n        loops: 1,\r\n\r\n        useGravity: true,\r\n        maxParticles: 300,\r\n        despawningRules: [despawningRules.lifetime, despawningRules.bounds],\r\n        modules: [],\r\n    };\r\n}\r\n","export * from \"./emitterOptions\";\r\nexport * from \"./emissionOptions\";\r\nexport * from \"./renderOptions\";\r\n","import { Color } from \"../../components/color\";\r\nimport { Variation } from \"../../systems/variation\";\r\nimport { Particle } from \"../particle\";\r\n\r\n/**\r\n * Represents a delegate used by the renderer to apply a certain property to the\r\n * particle's HTMLElement. Note that this property is generic and does not\r\n * have to contain the particle itself.\r\n */\r\nexport type ApplyFunction<T> = (property: T, element: HTMLElement) => void;\r\n\r\n/**\r\n * Holds the options used to configure the renderer for a particle system.\r\n */\r\nexport interface RenderOptions {\r\n    /**\r\n     * The factory used to determine the element (or \"shape\") that a particle will be rendered as.\r\n     * This variation can also return a resolve-able string.\r\n     *\r\n     * @remarks\r\n     * Depending on the type of value that is returned from the factory, additional\r\n     * processing has to be done.\r\n     *\r\n     * - strings: The `party.resolvableShapes` lookup is used to resolve the string to an actual\r\n     * HTMLElement, before following the same procedure as if an HTMLElement would have been passed.\r\n     * - HTMLElements: The returned element is deep cloned and used to represent the particle in the document.\r\n     *\r\n     * @defaultValue Creates a square-shaped `<div>` element with a size of 10px.\r\n     */\r\n    shapeFactory: Variation<HTMLElement | string>;\r\n\r\n    /**\r\n     * The delegate used to apply a certain color to the particle's HTMLElement.\r\n     * @defaultValue Applies the specified color to the element's \"background\" property.\r\n     */\r\n    applyColor?: ApplyFunction<Color>;\r\n    /**\r\n     * The delegate used to apply a certain degree of opacity to the particle's HTMLElement.\r\n     * @defaultValue Applies the specified opacity to the element's \"opacity\" property.\r\n     */\r\n    applyOpacity?: ApplyFunction<number>;\r\n    /**\r\n     * The delegate used to apply a certain degree of lighting to the particle's HTMLElement.\r\n     * @defaultValue Applies the specified lighting to the element as a brightness filter.\r\n     */\r\n    applyLighting?: ApplyFunction<number>;\r\n    /**\r\n     * The delegate used to apply a certain transform to the particle's HTMLElement.\r\n     * @defaultValue Applies the specified transform to the element as a 3D CSS transform.\r\n     */\r\n    applyTransform?: ApplyFunction<Particle>;\r\n}\r\n\r\n/**\r\n * Returns the default set of renderer options.\r\n */\r\nexport function getDefaultRendererOptions(): RenderOptions {\r\n    return {\r\n        shapeFactory: \"square\",\r\n\r\n        applyColor: defaultApplyColor,\r\n        applyOpacity: defaultApplyOpacity,\r\n        applyLighting: defaultApplyLighting,\r\n        applyTransform: defaultApplyTransform,\r\n    };\r\n}\r\n\r\n/**\r\n * Applies the specified color to the element.\r\n *\r\n * @remarks\r\n * This function is aware of the element's node type:\r\n * - `div` elements have their `background` set.\r\n * - `svg` elements have their `fill` and `color` set.\r\n * - Other elements have their `color` set.\r\n */\r\nfunction defaultApplyColor(color: Color, element: HTMLElement): void {\r\n    const hex = color.toHex();\r\n    // Note that by default, HTML node names are uppercase.\r\n    switch (element.nodeName.toLowerCase()) {\r\n        case \"div\":\r\n            element.style.background = hex;\r\n            break;\r\n        case \"svg\":\r\n            element.style.fill = element.style.color = hex;\r\n            break;\r\n        default:\r\n            element.style.color = hex;\r\n            break;\r\n    }\r\n}\r\n/**\r\n * Applies the specified opacity to the element.\r\n */\r\nfunction defaultApplyOpacity(opacity: number, element: HTMLElement): void {\r\n    element.style.opacity = opacity.toString();\r\n}\r\n/**\r\n * Applies the specified lighting to the element as a brightness filter.\r\n *\r\n * @remarks\r\n * This function assumes an ambient light with intensity 0.5, and that the\r\n * particle should be lit from both sides. The brightness filter can exceed 1,\r\n * to give the particles a \"glossy\" feel.\r\n */\r\nfunction defaultApplyLighting(lighting: number, element: HTMLElement): void {\r\n    element.style.filter = `brightness(${0.5 + Math.abs(lighting)})`;\r\n}\r\n/**\r\n * Applies the specified transform to the element as a 3D CSS transform.\r\n */\r\nfunction defaultApplyTransform(particle: Particle, element: HTMLElement): void {\r\n    element.style.transform =\r\n        `translateX(${particle.location.x.toFixed(3)}px) ` +\r\n        `translateY(${particle.location.y.toFixed(3)}px) ` +\r\n        `translateZ(${particle.location.z.toFixed(3)}px) ` +\r\n        `rotateX(${particle.rotation.x.toFixed(3)}deg) ` +\r\n        `rotateY(${particle.rotation.y.toFixed(3)}deg) ` +\r\n        `rotateZ(${particle.rotation.z.toFixed(3)}deg) ` +\r\n        `scale(${particle.size.toFixed(3)})`;\r\n}\r\n","import { Color, Vector } from \"../components\";\r\nimport { overrideDefaults } from \"../util/config\";\r\n\r\n/**\r\n * Represents a set of options that can be used to create the particle.\r\n */\r\nexport type ParticleCreationOptions = Partial<\r\n    Omit<Particle, \"id\" | \"initialLifetime\" | \"initialSize\" | \"initialRotation\">\r\n>;\r\n\r\n/**\r\n * Represents an emitted particle.\r\n */\r\nexport class Particle {\r\n    /**\r\n     * The unique (symbolic) ID of the particle.\r\n     */\r\n    id: symbol;\r\n\r\n    /**\r\n     * The remaining lifetime of the particle.\r\n     */\r\n    lifetime: number;\r\n    /**\r\n     * The current size of the particle.\r\n     */\r\n    size: number;\r\n    /**\r\n     * The current location of the particle, in pixels.\r\n     */\r\n    location: Vector;\r\n    /**\r\n     * The current rotation of the particle, in euler angles, in degrees.\r\n     */\r\n    rotation: Vector;\r\n    /**\r\n     * The current velocity of the particle.\r\n     */\r\n    velocity: Vector;\r\n    /**\r\n     * The current color of the particle.\r\n     */\r\n    color: Color;\r\n    /**\r\n     * The opacity of the particle (from 0 to 1).\r\n     */\r\n    opacity: number;\r\n\r\n    /**\r\n     * The initial lifetime of the particle.\r\n     */\r\n    initialLifetime: number;\r\n    /**\r\n     * The initial size of the particle.\r\n     */\r\n    initialSize: number;\r\n    /**\r\n     * The initial rotation of the particle.\r\n     */\r\n    initialRotation: Vector;\r\n\r\n    /**\r\n     * Creates a new particle instance through the specified options.\r\n     */\r\n    constructor(options: ParticleCreationOptions) {\r\n        const populatedOptions = overrideDefaults(\r\n            {\r\n                lifetime: 0,\r\n                size: 1,\r\n                location: Vector.zero,\r\n                rotation: Vector.zero,\r\n                velocity: Vector.zero,\r\n                color: Color.white,\r\n                opacity: 1,\r\n            },\r\n            options\r\n        );\r\n\r\n        // Generate a symbolic ID.\r\n        this.id = Symbol();\r\n\r\n        // Assign various properties, together with some initials for later reference.\r\n        this.size = this.initialSize = populatedOptions.size;\r\n        this.lifetime = this.initialLifetime = populatedOptions.lifetime;\r\n        this.rotation = this.initialRotation = populatedOptions.rotation;\r\n\r\n        this.location = populatedOptions.location;\r\n        this.velocity = populatedOptions.velocity;\r\n        this.color = populatedOptions.color;\r\n        this.opacity = populatedOptions.opacity;\r\n    }\r\n}\r\n","import { Vector } from \"../components/vector\";\r\nimport { particleContainer } from \"../containers\";\r\nimport { resolveShapeFactory } from \"../systems/shapes\";\r\nimport { rotationToNormal } from \"../util\";\r\nimport { Emitter } from \"./emitter\";\r\nimport { RenderOptions } from \"./options\";\r\nimport { Particle } from \"./particle\";\r\n\r\n/**\r\n * Represents a renderer used to draw particles to the DOM via HTML\r\n * elements. Additionally, it is responsible for purging the elements\r\n * of destroyed particles from the DOM.\r\n */\r\nexport class Renderer {\r\n    /**\r\n     * The lookup of elements currently handled by the renderer, with the\r\n     * particle ID as key and a HTMLElement as the value.\r\n     */\r\n    public elements: Map<symbol, HTMLElement> = new Map();\r\n    /**\r\n     * The normalized direction the light comes from.\r\n     */\r\n    public light: Vector = new Vector(0, 0, 1);\r\n\r\n    /**\r\n     * The collection of symbols containing the particles that were rendered this frame.\r\n     * This is, for example, used to delete unused particles from the DOM.\r\n     */\r\n    private renderedParticles: symbol[];\r\n\r\n    /**\r\n     * Begins a new render block.\r\n     */\r\n    public begin(): void {\r\n        this.renderedParticles = [];\r\n    }\r\n    /**\r\n     * Terminates an existing render block. This checks which particles were rendered\r\n     * during the block and purges all unused HTMLElements from the DOM.\r\n     *\r\n     * @returns The amount of particles that were rendered.\r\n     */\r\n    public end(): number {\r\n        const it = this.elements.keys();\r\n\r\n        let result = it.next();\r\n        while (!result.done) {\r\n            const id = result.value as symbol;\r\n            if (!this.renderedParticles.includes(id)) {\r\n                this.elements.get(id).remove();\r\n                this.elements.delete(id);\r\n            }\r\n            result = it.next();\r\n        }\r\n\r\n        return this.renderedParticles.length;\r\n    }\r\n\r\n    /**\r\n     * Renders an individual particle to the DOM. If the particle is rendered for the first\r\n     * time, a HTMLElement will be created using the emitter's render settings.\r\n     *\r\n     * @param particle The particle to be rendered.\r\n     * @param emitter The system containing the particle.\r\n     */\r\n    public renderParticle(particle: Particle, emitter: Emitter): void {\r\n        const options: RenderOptions = emitter.renderer;\r\n\r\n        // Ensure that an element for the particle exists.\r\n        const element = this.elements.has(particle.id)\r\n            ? this.elements.get(particle.id)\r\n            : this.createParticleElement(particle, options);\r\n\r\n        if (options.applyColor) {\r\n            // If the options offer a coloring method, apply it.\r\n            options.applyColor(particle.color, element);\r\n        }\r\n\r\n        if (options.applyOpacity) {\r\n            // If the options offer an opacity modifying method, apply it.\r\n            options.applyOpacity(particle.opacity, element);\r\n        }\r\n\r\n        if (options.applyLighting) {\r\n            // If the options offer a lighting method, apply it.\r\n            // Lighting is calculated as a combination of the particle's normal\r\n            // direction and the lighting direction.\r\n            const normal = rotationToNormal(particle.rotation);\r\n            const lightingCoefficient = normal.dot(this.light);\r\n\r\n            options.applyLighting(lightingCoefficient, element);\r\n        }\r\n\r\n        if (options.applyTransform) {\r\n            // If the options offer a transformation method, apply it.\r\n            // This ensures the particle is rendered at the correct position with the correct rotation.\r\n            options.applyTransform(particle, element);\r\n        }\r\n\r\n        // Mark the particle as rendered.\r\n        this.renderedParticles.push(particle.id);\r\n    }\r\n\r\n    /**\r\n     * Creates the HTMLElement for a particle that does not have one already.\r\n     */\r\n    private createParticleElement(\r\n        particle: Particle,\r\n        options: RenderOptions\r\n    ): HTMLElement {\r\n        // Resolve the element returned from the factory.\r\n        const resolved = resolveShapeFactory(options.shapeFactory);\r\n        // Clone the node to ensure we do not break existing elements.\r\n        const element = resolved.cloneNode(true) as HTMLElement;\r\n\r\n        // Ensure that the elements can be \"stacked\" ontop of eachother.\r\n        element.style.position = \"absolute\";\r\n\r\n        // Register the new element in the map, while appending the new element to the DOM.\r\n        this.elements.set(\r\n            particle.id,\r\n            particleContainer.current.appendChild(element)\r\n        );\r\n\r\n        return element;\r\n    }\r\n}\r\n","import { Debug } from \"./debug\";\r\nimport { Emitter, EmitterConstructionOptions } from \"./particles/emitter\";\r\nimport { Renderer } from \"./particles/renderer\";\r\n\r\n/**\r\n * Represents a scene that contains emitters and their particles.\r\n *\r\n * Scenes are responsible for spawning and updating emitters, and\r\n * removing them once they are done.\r\n *\r\n * Scenes are not explicitely present in the DOM as an element, only\r\n * the contained particles are.\r\n */\r\nexport class Scene {\r\n    /**\r\n     * The emitters currently present in the scene.\r\n     */\r\n    public emitters: Emitter[] = [];\r\n\r\n    /**\r\n     * The debug instance associated with the scene.\r\n     */\r\n    public readonly debug = new Debug(this);\r\n    /**\r\n     * The renderer associated with the scene.\r\n     */\r\n    public readonly renderer = new Renderer();\r\n\r\n    /**\r\n     * The ID of the currently scheduled tick.\r\n     */\r\n    private scheduledTickId?: number = undefined;\r\n    /**\r\n     * The timestamp of the last tick, used to calculate deltas.\r\n     *\r\n     * @initialValue `performance.now()` (time origin)\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\r\n     */\r\n    private lastTickTimestamp = performance.now();\r\n\r\n    /**\r\n     * Initializes a new scene and starts the ticking job.\r\n     */\r\n    constructor() {\r\n        // Ensure the scene context is preserved on the tick.\r\n        this.tick = this.tick.bind(this);\r\n        this.scheduleTick();\r\n    }\r\n\r\n    /**\r\n     * Creates and returns a new, default emitter object.\r\n     */\r\n    public createEmitter(options?: EmitterConstructionOptions): Emitter {\r\n        const emitter = new Emitter(options);\r\n        this.emitters.push(emitter);\r\n        return emitter;\r\n    }\r\n    /**\r\n     * Clears all emitters from the scene.\r\n     *\r\n     * @returns The number of cleared emitters.\r\n     */\r\n    public clearEmitters(): number {\r\n        return this.emitters.splice(0).length;\r\n    }\r\n    /**\r\n     * Clears the particles from all emitters in the scene.\r\n     * Note that this does not remove the actual emitter objects though.\r\n     *\r\n     * @returns The number of cleared particles.\r\n     */\r\n    public clearParticles(): number {\r\n        return this.emitters.reduce(\r\n            (sum, emitter) => sum + emitter.clearParticles(),\r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Schedules a tick in the scene.\r\n     */\r\n    public scheduleTick(): void {\r\n        this.scheduledTickId = window.requestAnimationFrame(this.tick);\r\n    }\r\n    /**\r\n     * Cancels a pending tick operation.\r\n     */\r\n    public cancelTick(): void {\r\n        window.cancelAnimationFrame(this.scheduledTickId);\r\n    }\r\n\r\n    /**\r\n     * Processes a tick cycle, updating all emitters contained in the scene.\r\n     * This is handled as a JS animation frame event, hence the passed timestamp.\r\n     *\r\n     * @remarks\r\n     * The emitter ticking and particle rendering is run using try-catch blocks,\r\n     * to ensure that we can recover from potential errors.\r\n     *\r\n     * @param timestamp The current timestamp of the animation frame.\r\n     */\r\n    private tick(timestamp: number): void {\r\n        // Calculate the elapsed delta and convert it to seconds.\r\n        const delta = (timestamp - this.lastTickTimestamp) / 1000;\r\n\r\n        try {\r\n            // Perform ticks for all the emitters in the scene.\r\n            for (let i = 0; i < this.emitters.length; i++) {\r\n                const emitter = this.emitters[i];\r\n\r\n                emitter.tick(delta);\r\n                if (emitter.isExpired && emitter.canRemove) {\r\n                    this.emitters.splice(i--, 1);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\r\n                `An error occurred while updating the scene's emitters:\\n\"${error}\"`\r\n            );\r\n        }\r\n\r\n        try {\r\n            // Instruct the renderer to draw the particles of all systems.\r\n            this.renderer.begin();\r\n            for (const emitter of this.emitters) {\r\n                for (const particle of emitter.particles) {\r\n                    this.renderer.renderParticle(particle, emitter);\r\n                }\r\n            }\r\n            this.renderer.end();\r\n        } catch (error) {\r\n            console.error(\r\n                `An error occurred while rendering the scene's particles:\\n\"${error}\"`\r\n            );\r\n        }\r\n\r\n        // Perform a tick on the debug interface\r\n        this.debug.tick(delta);\r\n\r\n        // Save the timestamp as the last tick timestamp and schedule a new tick.\r\n        this.lastTickTimestamp = timestamp;\r\n        this.scheduleTick();\r\n    }\r\n}\r\n","/**\r\n * Represents global settings used throughout the library.\r\n */\r\nexport interface Settings {\r\n    /**\r\n     * Whether the debugging mode should be enabled.\r\n     *\r\n     * @defaultValue false\r\n     */\r\n    debug: boolean;\r\n    /**\r\n     * The amount of gravity to apply to particles in the scene, in pixels.\r\n     * Note that this value is positive by default, since the y-axis increases\r\n     * downwards in a DOM.\r\n     *\r\n     * @defaultValue 800\r\n     */\r\n    gravity: number;\r\n    /**\r\n     * The z-index to place the DOM containers at.\r\n     *\r\n     * @defaultValue 99999\r\n     */\r\n    zIndex: number;\r\n}\r\n\r\nexport const settings: Settings = {\r\n    debug: false,\r\n    gravity: 800,\r\n    zIndex: 99999,\r\n};\r\n","/**\r\n * Constant coefficient to convert degrees to radians.\r\n */\r\nexport const deg2rad: number = Math.PI / 180;\r\n/**\r\n * Constant coefficient to convert radians to degrees.\r\n */\r\nexport const rad2deg: number = 180 / Math.PI;\r\n/**\r\n * A small value to approximately compare values.\r\n */\r\nexport const epsilon = 0.000001;\r\n\r\n/**\r\n * Linearly interpolates between a and b by t.\r\n */\r\nexport function lerp(a: number, b: number, t: number): number {\r\n    return (1 - t) * a + t * b;\r\n}\r\n\r\n/**\r\n * Smoothly interpolates between a and b by t (using cosine interpolation).\r\n */\r\nexport function slerp(a: number, b: number, t: number): number {\r\n    return lerp(a, b, (1 - Math.cos(t * Math.PI)) / 2);\r\n}\r\n\r\n/**\r\n * Inversely lerps v between a and b to find t.\r\n */\r\nexport function invlerp(a: number, b: number, v: number): number {\r\n    return (v - a) / (b - a);\r\n}\r\n\r\n/**\r\n * Clamps the specified value between a minimum and a maximum.\r\n */\r\nexport function clamp(value: number, min: number, max: number): number {\r\n    return Math.min(max, Math.max(min, value));\r\n}\r\n\r\n/**\r\n * Checks if a is approximately equal to b.\r\n */\r\nexport function approximately(a: number, b: number): boolean {\r\n    return Math.abs(a - b) < epsilon;\r\n}\r\n","import { Vector } from \"../components\";\r\nimport { Spline } from \"../components/spline\";\r\nimport { Particle } from \"../particles/particle\";\r\n\r\ntype ValueOf<T> = T[keyof T];\r\n\r\n/**\r\n * Represents a value that can be used to drive a particle module.\r\n */\r\nexport type ModuleDriverValue<T> =\r\n    | T\r\n    | Spline<T>\r\n    | ((factor: number, particle?: Particle) => T);\r\n/**\r\n * Represents a value that can be used to modify the properties of a particle over it's lifetime.\r\n */\r\nexport type ModuleFunction = (particle: Particle) => void;\r\n\r\n/**\r\n * Represents the properties of a particle that are drivable through modules.\r\n */\r\nexport type DrivableProperties = Pick<\r\n    Particle,\r\n    \"color\" | \"opacity\" | \"rotation\" | \"size\"\r\n>;\r\n\r\n/**\r\n * Represents the possible, drivable keys of a particle.\r\n */\r\nexport type DrivableKey = keyof DrivableProperties;\r\n/**\r\n * Represents the possible types of drivable keys.\r\n */\r\nexport type DrivableType = ValueOf<DrivableProperties>;\r\n/**\r\n * Represents the possible factors of drivable values.\r\n */\r\nexport type DrivableFactor = \"lifetime\" | \"relativeLifetime\" | \"size\";\r\n\r\n/**\r\n * Represents a builder for particle modules. Returns an evaluatable module\r\n * function, that can be consumed by emitters.\r\n *\r\n * @remarks\r\n * Not all properties can be driven. TypeScript will validate this at compile time,\r\n * but no internal validation is performed due to performance reasons. Also, note\r\n * that the driving factor is \"lifetime\" by default.\r\n *\r\n * @example\r\n * ```ts\r\n * new ModuleBuilder()\r\n *     .drive(\"size\")\r\n *     .by((t) => t * 2)\r\n *     .through(\"lifetime\")\r\n *     .build();\r\n * ```\r\n */\r\nexport class ModuleBuilder {\r\n    /**\r\n     * The specified key of the builder.\r\n     */\r\n    protected driverKey?: DrivableKey;\r\n    /**\r\n     * The value to drive the property with.\r\n     */\r\n    protected driverValue?: ModuleDriverValue<DrivableType>;\r\n\r\n    /**\r\n     * The factor driving the built function.\r\n     *\r\n     * @defaultValue \"lifetime\"\r\n     */\r\n    protected factor: DrivableFactor = \"lifetime\";\r\n\r\n    protected isRelative = false;\r\n\r\n    /**\r\n     * Specifies the key in the particle that should be driven.\r\n     *\r\n     * @remarks\r\n     * Note that not all of a particle's properties are drivable through modules. If you\r\n     * need full control of a particle inside of a module, you can use a module function directly.\r\n     *\r\n     * @returns The chained builder instance.\r\n     */\r\n    public drive<TKey extends DrivableKey>(key: TKey): ModuleBuilder {\r\n        this.driverKey = key;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies the factor to drive the evaluated value by. Supports \"lifetime\" and \"size\".\r\n     *\r\n     * @returns The chained builder instance.\r\n     */\r\n    public through(factor: DrivableFactor): ModuleBuilder {\r\n        this.factor = factor;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies the value to drive the module behaviour by. This can be a constant,\r\n     * a spline or an evaluable function. Note that in the last case, the driving\r\n     * factor is passed as a parameter.\r\n     *\r\n     * @returns The chained builder instance.\r\n     */\r\n    public by<TDriver extends DrivableType>(\r\n        driver: ModuleDriverValue<TDriver>\r\n    ): ModuleBuilder {\r\n        this.driverValue = driver;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the module function is supposed to act relative to the\r\n     * properties initial value.\r\n     *\r\n     * @remarks\r\n     * Note that this is only possible if an \"initial*\" property exists on the\r\n     * particle object. The operation applied to the initial and new value\r\n     * is dependant on their type:\r\n     * - `Vector`: Both vectors are added.\r\n     * - `number`: Both numbers are multiplied.\r\n     *\r\n     * For more advanced relative customizations, consider using the particle\r\n     * object in the driver value function instead, like:\r\n     * ```ts\r\n     * .by((t, p) => p.initialSize + t * 2);\r\n     * ```\r\n     */\r\n    public relative(isRelative = true): ModuleBuilder {\r\n        this.isRelative = isRelative;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Consumes the builder and returns an evaluatable module function.\r\n     *\r\n     * @remarks\r\n     * Note that you need to specify the driving key and value, otherwise an error\r\n     * will be thrown.\r\n     */\r\n    public build(): ModuleFunction {\r\n        if (typeof this.driverKey === \"undefined\") {\r\n            throw new Error(\r\n                \"No driving key was provided in the module builder. Did you forget a '.drive()' call?\"\r\n            );\r\n        }\r\n        if (typeof this.driverValue === \"undefined\") {\r\n            throw new Error(\r\n                \"No driving value was provided in the module builder. Did you forget a '.through()' call?\"\r\n            );\r\n        }\r\n\r\n        return (particle: Particle) => {\r\n            updateDrivenProperty(\r\n                particle,\r\n                this.driverKey,\r\n                evaluateModuleDriver(\r\n                    this.driverValue,\r\n                    calculateModuleFactor(this.factor, particle),\r\n                    particle\r\n                ),\r\n                this.isRelative\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Evaluates the module driver using a specified factor.\r\n */\r\nfunction evaluateModuleDriver<T>(\r\n    driver: ModuleDriverValue<T>,\r\n    factor: number,\r\n    particle: Particle\r\n): T {\r\n    if (typeof driver === \"object\" && \"evaluate\" in driver) {\r\n        return driver.evaluate(factor);\r\n    }\r\n    if (typeof driver === \"function\") {\r\n        return (driver as (factor: number, particle: Particle) => T)(\r\n            factor,\r\n            particle\r\n        );\r\n    }\r\n    return driver;\r\n}\r\n\r\n/**\r\n * Calculates a module factor using a specified particle as context.\r\n */\r\nfunction calculateModuleFactor(\r\n    factor: DrivableFactor,\r\n    particle: Particle\r\n): number {\r\n    switch (factor) {\r\n        case \"lifetime\":\r\n            return particle.initialLifetime - particle.lifetime;\r\n        case \"relativeLifetime\":\r\n            return (\r\n                (particle.initialLifetime - particle.lifetime) /\r\n                particle.initialLifetime\r\n            );\r\n        case \"size\":\r\n            return particle.size;\r\n        default:\r\n            throw new Error(`Invalid driving factor '${factor}'.`);\r\n    }\r\n}\r\n\r\n/**\r\n * Updates a driven property of a particle using the specified value.\r\n *\r\n * @remarks\r\n * If the operation is marked as relative, the function infers the new value\r\n * through the value's type. Note that relative properties must have a\r\n * corresponding \"initial*\" value in the particle's properties.\r\n */\r\nfunction updateDrivenProperty(\r\n    particle: Particle,\r\n    key: DrivableKey,\r\n    value: DrivableType,\r\n    relative = false\r\n): void {\r\n    if (!relative) {\r\n        particle[key] = value as never;\r\n    } else {\r\n        const initial = particle[\r\n            \"initial\" + key[0].toUpperCase() + key.substr(1)\r\n        ] as DrivableType;\r\n\r\n        if (typeof initial === \"undefined\") {\r\n            throw new Error(\r\n                `Unable to use relative chaining with key '${key}'; no initial value exists.`\r\n            );\r\n        }\r\n\r\n        if (value instanceof Vector) {\r\n            updateDrivenProperty(particle, key, (initial as Vector).add(value));\r\n        } else if (typeof value === \"number\") {\r\n            updateDrivenProperty(particle, key, (initial as number) * value);\r\n        } else {\r\n            throw new Error(\r\n                `Unable to use relative chaining with particle key '${key}'; no relative operation for '${value}' could be inferred.`\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Circle, Rect, Vector } from \"../components\";\r\nimport { lerp } from \"./math\";\r\n\r\n/**\r\n * Returns a random value from min to max.\r\n */\r\nexport function randomRange(min = 0, max = 1): number {\r\n    return lerp(min, max, Math.random());\r\n}\r\n\r\n/**\r\n * Picks a random element from the specified array. Returns undefined if the array is empty.\r\n */\r\nexport function pick<T>(arr: T[]): T {\r\n    return arr.length === 0\r\n        ? undefined\r\n        : arr[Math.floor(Math.random() * arr.length)];\r\n}\r\n\r\n/**\r\n * Returns a random unit vector.\r\n */\r\nexport function randomUnitVector(): Vector {\r\n    const theta = randomRange(0, 2 * Math.PI);\r\n    const z = randomRange(-1, 1);\r\n    return new Vector(\r\n        Math.sqrt(1 - z * z) * Math.cos(theta),\r\n        Math.sqrt(1 - z * z) * Math.sin(theta),\r\n        z\r\n    );\r\n}\r\n\r\n/**\r\n * Returns a random point inside the given rect.\r\n */\r\nexport function randomInsideRect(rect: Rect): Vector {\r\n    return new Vector(\r\n        rect.x + randomRange(0, rect.width),\r\n        rect.y + randomRange(0, rect.height)\r\n    );\r\n}\r\n\r\nexport function randomInsideCircle(circle: Circle): Vector {\r\n    const theta = randomRange(0, 2 * Math.PI);\r\n    const radius = randomRange(0, circle.radius);\r\n    return new Vector(\r\n        circle.x + Math.cos(theta) * radius,\r\n        circle.y + Math.sin(theta) * radius\r\n    );\r\n}\r\n","import { Variation, evaluateVariation } from \"./variation\";\r\n\r\n/**\r\n * Represents the lookup that maps resolveable element keys to their HTML strings.\r\n *\r\n * @remarks\r\n * The default shapes are made to fit inside a dimension of 10x10 pixels, except\r\n * the 'star' shape, which exceeds it slightly.\r\n */\r\nexport const resolvableShapes: Record<string, string> = {\r\n    square: `<div style=\"height: 10px; width: 10px;\"></div>`,\r\n    rectangle: `<div style=\"height: 6px; width: 10px;\"></div>`,\r\n    circle: `<svg viewBox=\"0 0 2 2\" width=\"10\" height=\"10\"><circle cx=\"1\" cy=\"1\" r=\"1\" fill=\"currentColor\"/></svg>`,\r\n    roundedSquare: `<div style=\"height: 10px; width: 10px; border-radius: 3px;\"></div>`,\r\n    roundedRectangle: `<div style=\"height: 6px; width: 10px; border-radius: 3px;\"></div>`,\r\n    star: `<svg viewBox=\"0 0 512 512\" width=\"15\" height=\"15\"><polygon fill=\"currentColor\" points=\"512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842\"/></svg>`,\r\n};\r\n\r\n/**\r\n * Resolves the specified element factory using the resolvable elements, if needed.\r\n */\r\nexport function resolveShapeFactory(\r\n    factory: Variation<string | HTMLElement>\r\n): HTMLElement {\r\n    // Retrieve the unresolved element from the factory.\r\n    const shape = evaluateVariation(factory);\r\n    // If a string is returned, we need to resolve the element. This means\r\n    // looking up the string in the resolver lookup. If the key was not\r\n    // resolvable, we throw an error.\r\n    if (typeof shape === \"string\") {\r\n        const resolved = resolvableShapes[shape];\r\n        if (!resolved) {\r\n            throw new Error(\r\n                `Failed to resolve shape key '${shape}'. Did you forget to add it to the 'resolvableShapes' lookup?`\r\n            );\r\n        }\r\n        // We're in luck, we can resolve the element! We create a dummy <div> element\r\n        // to set the innerHTML of, and return the first element child.\r\n        const dummy = document.createElement(\"div\");\r\n        dummy.innerHTML = resolved;\r\n        return dummy.firstElementChild as HTMLElement;\r\n    }\r\n    return shape;\r\n}\r\n","import { Circle, Rect, Vector } from \"../components\";\r\nimport { randomInsideCircle, randomInsideRect } from \"./random\";\r\n\r\n/**\r\n * Represents a method used for sampling points to emit particles from.\r\n */\r\nexport type SourceSampler = () => Vector;\r\n/**\r\n * Represents all types where a source type can be dynamically inferred.\r\n */\r\nexport type DynamicSourceType = Circle | Rect | HTMLElement | MouseEvent;\r\n\r\n/**\r\n * Dynamically infers a source sampler for the specified source type.\r\n */\r\nexport function dynamicSource(source: unknown): SourceSampler {\r\n    if (source instanceof HTMLElement) {\r\n        return elementSource(source);\r\n    }\r\n    if (source instanceof Circle) {\r\n        return circleSource(source);\r\n    }\r\n    if (source instanceof Rect) {\r\n        return rectSource(source);\r\n    }\r\n    if (source instanceof MouseEvent) {\r\n        return mouseSource(source);\r\n    }\r\n\r\n    throw new Error(`Cannot infer the source type of '${source}'.`);\r\n}\r\n\r\n/**\r\n * Creates a sampler to retrieve random points inside a specified HTMLElement.\r\n */\r\nexport function elementSource(source: HTMLElement): SourceSampler {\r\n    return () => randomInsideRect(Rect.fromElement(source));\r\n}\r\n\r\n/**\r\n * Creates a sampler to retrieve the position of a mouse event.\r\n */\r\nexport function mouseSource(source: MouseEvent): SourceSampler {\r\n    return () =>\r\n        new Vector(\r\n            window.scrollX + source.clientX,\r\n            window.scrollY + source.clientY\r\n        );\r\n}\r\n/**\r\n * Creates a sampler to retrieve random points inside a specified rectangle.\r\n */\r\nexport function rectSource(source: Rect): SourceSampler {\r\n    return () => randomInsideRect(source);\r\n}\r\n/**\r\n * Creates a sampler to retrieve random points inside a specified circle.\r\n */\r\nexport function circleSource(source: Circle): SourceSampler {\r\n    return () => randomInsideCircle(source);\r\n}\r\n","import { Color, Gradient } from \"../components\";\r\nimport { Spline } from \"../components/spline\";\r\nimport { pick, randomRange } from \"./random\";\r\n\r\n/**\r\n * Represents a junction of types that can be used as a variation on a value.\r\n * At any point in time, the variation can be evaluated to retrieve a \"primitive\" value.\r\n * The variation can consist of a constant, an array or an evaluateable function.\r\n */\r\nexport type Variation<T> = T | T[] | (() => T);\r\n\r\n/**\r\n * Returns a value instance of a variation.\r\n */\r\nexport function evaluateVariation<T>(variation: Variation<T>): T {\r\n    if (Array.isArray(variation)) return pick(variation);\r\n    if (typeof variation === \"function\") return (variation as () => T)();\r\n    return variation;\r\n}\r\n\r\n/**\r\n * Creates a variation function that returns a random number from min to max.\r\n */\r\nexport function range(min: number, max: number): Variation<number> {\r\n    return () => randomRange(min, max);\r\n}\r\n\r\n/**\r\n * Creates a variation function that skews the specified value by a specified, absolute\r\n * amount. This means that instead of the value itself, a random number that deviates\r\n * at most by the specified amount is returned.\r\n *\r\n * @remarks\r\n * If you want to skew by a percentage instead, use `skewRelative`.\r\n */\r\nexport function skew(value: number, amount: number): Variation<number> {\r\n    return () => value + randomRange(-amount, amount);\r\n}\r\n\r\n/**\r\n * Creates a variation function that skews the specified value by a specified percentage.\r\n * This means that instead of the value itself, a random number that deviates by a maximum\r\n * of the specified percentage is returned.\r\n */\r\nexport function skewRelative(\r\n    value: number,\r\n    percentage: number\r\n): Variation<number> {\r\n    return () => value * (1 + randomRange(-percentage, percentage));\r\n}\r\n\r\n/**\r\n * Creates a variation function that returns a random sample from the given spline.\r\n *\r\n * @param spline The spline to sample from.\r\n */\r\nexport function splineSample<T>(spline: Spline<T>): Variation<T> {\r\n    return () => spline.evaluate(Math.random());\r\n}\r\n\r\n/**\r\n * Creates a variation function that returns a random sample from the given gradient.\r\n *\r\n * @remarks\r\n * This function is an alias for the spline variation, since a gradient is just\r\n * a spline under the hood.\r\n *\r\n * @param gradient The gradient to sample from.\r\n */\r\nexport function gradientSample(gradient: Gradient): Variation<Color> {\r\n    return splineSample(gradient);\r\n}\r\n","import party from \"../\";\r\nimport { Color, Vector } from \"../components\";\r\nimport { Emitter } from \"../particles/emitter\";\r\nimport { ModuleBuilder, ModuleFunction } from \"../systems/modules\";\r\nimport * as random from \"../systems/random\";\r\nimport * as sources from \"../systems/sources\";\r\nimport * as variation from \"../systems/variation\";\r\n\r\n/**\r\n * The configuration to apply to the confetti.\r\n */\r\nexport interface ConfettiConfiguration {\r\n    count: variation.Variation<number>;\r\n    spread: variation.Variation<number>;\r\n    speed: variation.Variation<number>;\r\n    size: variation.Variation<number>;\r\n    rotation: variation.Variation<Vector>;\r\n    color: variation.Variation<Color>;\r\n    shapes: variation.Variation<string | HTMLElement>;\r\n    modules: ModuleFunction[];\r\n}\r\n\r\n/**\r\n * The standard confetti template.\r\n *\r\n * @param source The source to emit the confetti from.\r\n * @param options The (optional) configuration overrides.\r\n */\r\nexport function confetti(\r\n    source: sources.DynamicSourceType,\r\n    options?: Partial<ConfettiConfiguration>\r\n): Emitter {\r\n    const populated = party.util.overrideDefaults(\r\n        {\r\n            count: party.variation.range(20, 40),\r\n            spread: party.variation.range(35, 45),\r\n            speed: party.variation.range(300, 600),\r\n            size: party.variation.skew(1, 0.2),\r\n            rotation: () => random.randomUnitVector().scale(180),\r\n            color: () => Color.fromHsl(random.randomRange(0, 360), 100, 70),\r\n            modules: [\r\n                new ModuleBuilder()\r\n                    .drive(\"size\")\r\n                    .by((t) => Math.min(1, t * 3))\r\n                    .build(),\r\n                new ModuleBuilder()\r\n                    .drive(\"rotation\")\r\n                    .by((t) => new Vector(140, 200, 260).scale(t))\r\n                    .relative()\r\n                    .build(),\r\n            ],\r\n            shapes: [\"square\", \"circle\"],\r\n        },\r\n        options\r\n    );\r\n\r\n    const emitter = party.scene.current.createEmitter({\r\n        emitterOptions: {\r\n            loops: 1,\r\n            duration: 8,\r\n            modules: populated.modules,\r\n        },\r\n        emissionOptions: {\r\n            rate: 0,\r\n            bursts: [{ time: 0, count: populated.count }],\r\n\r\n            sourceSampler: sources.dynamicSource(source),\r\n            angle: variation.skew(\r\n                -90,\r\n                variation.evaluateVariation(populated.spread)\r\n            ),\r\n\r\n            initialLifetime: variation.range(6, 8),\r\n            initialSpeed: populated.speed,\r\n            initialSize: populated.size,\r\n            initialRotation: populated.rotation,\r\n            initialColor: populated.color,\r\n        },\r\n        rendererOptions: {\r\n            shapeFactory: populated.shapes,\r\n        },\r\n    });\r\n\r\n    return emitter;\r\n}\r\n","export * from \"./confetti\";\r\nexport * from \"./sparkles\";\r\n","import party from \"../\";\r\nimport { Color, NumericSpline, Vector } from \"../components\";\r\nimport { Emitter } from \"../particles/emitter\";\r\nimport { ModuleBuilder, ModuleFunction } from \"../systems/modules\";\r\nimport * as random from \"../systems/random\";\r\nimport * as sources from \"../systems/sources\";\r\nimport * as variation from \"../systems/variation\";\r\n\r\n/**\r\n * The configuration to apply to the sparkles.\r\n */\r\nexport interface SparkleConfiguration {\r\n    count: variation.Variation<number>;\r\n    speed: variation.Variation<number>;\r\n    size: variation.Variation<number>;\r\n    rotation: variation.Variation<Vector>;\r\n    color: variation.Variation<Color>;\r\n    modules: ModuleFunction[];\r\n}\r\n\r\n/**\r\n * The standard sparkles template.\r\n *\r\n * @param source The source to emit the sparkles from.\r\n * @param options The (optional) configuration overrides.\r\n */\r\nexport function sparkles(\r\n    source: sources.DynamicSourceType,\r\n    options?: Partial<SparkleConfiguration>\r\n): Emitter {\r\n    const populated = party.util.overrideDefaults(\r\n        {\r\n            count: variation.range(10, 20),\r\n            speed: variation.range(100, 200),\r\n            size: variation.range(0.8, 1.8),\r\n            rotation: () => new Vector(0, 0, random.randomRange(0, 360)),\r\n            color: () => Color.fromHsl(50, 100, random.randomRange(55, 85)),\r\n            modules: [\r\n                new ModuleBuilder()\r\n                    .drive(\"rotation\")\r\n                    .by((t) => new Vector(0, 0, 200).scale(t))\r\n                    .build(),\r\n                new ModuleBuilder()\r\n                    .drive(\"size\")\r\n                    .by(\r\n                        new NumericSpline(\r\n                            { time: 0, value: 0 },\r\n                            { time: 0.3, value: 1 },\r\n                            { time: 0.7, value: 1 },\r\n                            { time: 1, value: 0 }\r\n                        )\r\n                    )\r\n                    .through(\"relativeLifetime\")\r\n                    .relative()\r\n                    .build(),\r\n                new ModuleBuilder()\r\n                    .drive(\"opacity\")\r\n                    .by(\r\n                        new NumericSpline(\r\n                            { time: 0, value: 1 },\r\n                            { time: 0.5, value: 1 },\r\n                            { time: 1, value: 0 }\r\n                        )\r\n                    )\r\n                    .through(\"relativeLifetime\")\r\n                    .build(),\r\n            ],\r\n        },\r\n        options\r\n    );\r\n\r\n    const emitter = party.scene.current.createEmitter({\r\n        emitterOptions: {\r\n            loops: 1,\r\n            duration: 3,\r\n            useGravity: false,\r\n            modules: populated.modules,\r\n        },\r\n        emissionOptions: {\r\n            rate: 0,\r\n            bursts: [{ time: 0, count: populated.count }],\r\n\r\n            sourceSampler: sources.dynamicSource(source),\r\n            angle: variation.range(0, 360),\r\n\r\n            initialLifetime: variation.range(1, 2),\r\n            initialSpeed: populated.speed,\r\n            initialSize: populated.size,\r\n            initialRotation: populated.rotation,\r\n            initialColor: populated.color,\r\n        },\r\n        rendererOptions: {\r\n            applyLighting: undefined,\r\n            shapeFactory: \"star\",\r\n        },\r\n    });\r\n\r\n    return emitter;\r\n}\r\n","/**\r\n * Replaces the supplied defaults with the properties specified in the overrides.\r\n * This returns a new object.\r\n */\r\nexport function overrideDefaults<T>(defaults: T, overrides?: Partial<T>): T {\r\n    return Object.assign({}, defaults, overrides);\r\n}\r\n","export * from \"./config\";\r\nexport * from \"./rotation\";\r\nexport * from \"./rules\";\r\nexport * from \"./lazy\";\r\n","/**\r\n * A factory method used to initialize a lazy value.\r\n */\r\ntype LazyFactory<T> = () => T;\r\n/**\r\n * A predicate method used to check if a lazy value was already initialized.\r\n */\r\ntype ExistsPredicate<T> = (value: T) => boolean;\r\n\r\n/**\r\n * A wrapper class to lazily initialize a value.\r\n * Supports custom factory and predicate methods.\r\n */\r\nexport class Lazy<T> {\r\n    /**\r\n     * The current value of the lazy object. Will be initialized, if the 'exists'\r\n     * predicate doesn't match.\r\n     */\r\n    public get current(): T {\r\n        if (!this.exists(this.value)) {\r\n            this.value = this.factory();\r\n        }\r\n        return this.value;\r\n    }\r\n\r\n    private value?: T;\r\n\r\n    constructor(\r\n        private factory: LazyFactory<T>,\r\n        private exists: ExistsPredicate<T> = Lazy.defaultExists\r\n    ) {}\r\n\r\n    private static defaultExists<T>(value: T): boolean {\r\n        return typeof value !== \"undefined\";\r\n    }\r\n}\r\n","import { Vector } from \"../components\";\r\nimport { deg2rad } from \"../systems/math\";\r\n\r\n/**\r\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\r\n *\r\n * @remarks\r\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\r\n * origin, and rotating it by the specified angles. Note that the z-component of the\r\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\r\n * describing the orientation of the plane are calculated. Their cross product\r\n * denotes the normal vector.\r\n *\r\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\r\n */\r\nexport function rotationToNormal(rotation: Vector): Vector {\r\n    const alpha = rotation.x * deg2rad;\r\n    const beta = rotation.y * deg2rad;\r\n\r\n    const a = new Vector(Math.cos(beta), 0, Math.sin(beta));\r\n    const b = new Vector(0, Math.cos(alpha), Math.sin(alpha));\r\n\r\n    return a.cross(b);\r\n}\r\n","import { Particle } from \"../particles/particle\";\r\n\r\n/**\r\n * Contains a set of pre-defined particle despawning rules.\r\n */\r\nexport const despawningRules = {\r\n    /**\r\n     * A rule that despawns a particle once its lifetime is over.\r\n     */\r\n    lifetime: function (particle: Particle): boolean {\r\n        return particle.lifetime <= 0;\r\n    },\r\n    /**\r\n     * A rule that despawns a particle once its y-coordinate is outside of the document.\r\n     */\r\n    bounds: function (particle: Particle): boolean {\r\n        // Get document height: https://stackoverflow.com/a/44077777/5507624\r\n        const height = document.documentElement.scrollHeight;\r\n        return particle.location.y > height;\r\n    },\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n"],"sourceRoot":""}